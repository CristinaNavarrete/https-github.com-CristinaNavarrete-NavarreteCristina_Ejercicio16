import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from pandas.plotting import scatter_matrix
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
import sklearn.tree


%matplotlib inline
# Carga datos
data = pd.read_csv('OJ.csv')

# Remueve datos que no se van a utilizar
data = data.drop(['Store7', 'PctDiscCH','PctDiscMM'],axis=1)

# Crea un nuevo array que sera el target, 0 si MM, 1 si CH
purchasebin = np.ones(len(data), dtype=int)
ii = np.array(data['Purchase']=='MM')
purchasebin[ii] = 0

data['Target'] = purchasebin

# Borra la columna Purchase
data = data.drop(['Purchase'],axis=1)

# Crea un dataframe con los predictores
predictors = list(data.keys())
predictors.remove('Target')
predictors.remove('Unnamed: 0')
print(predictors)

X=data[predictors]
y=data['Target']
x_train, x_test, y_train, y_test = train_test_split(X, y, train_size=0.5)
n=len(x_train)
#Ahora vamos a hacer bootstrapping
sub_int= np.random.randint(n, size=n)
#x_train[sub_int,:]


def vector_random(vector,y_vec):
    n=len(vector)
    sub_int= np.random.randint(n, size=n)
    print(sub_int)
    vector2=vector[sub_int,:]
    y_vec2=y_vec[sub_int]
    return vector2, y_vec2  

vector2= vector_random(x_train)    


for i in range(100):
    #elegimos un subconjunto
    sub_train, sub_target_train =vector_random(x_train,y_train) 
    sub_test, subtarget= vector_random(x_test)
    for j in range(10):
        clf = sklearn.tree.DecisionTreeClassifier(max_depth=j)
        clf.fit(sub_train, target)
